Backbone Music Player Application
=================================

- Goal to be able to grasp basic backbone features 
- Deadline until friday.

To test Model View:
	1. Create a Model 
	2. Then pass the model to the a new view, call render form, the view should have a template and render function will use it and set it to the views el property.
	3. use view.el -- append to the page

_.bindAll 
=========
- function = permanently associate metods with a specific object
	http://blog.bigbinary.com/2011/08/18/understanding-bind-and-bindall-in-backbone.html

	- bindAll uses bind and bind uses apply --
		apply lets us control the value of this when the function is invoked.
		.apply(context, arrayOfArgs)
		.call(context, arg1, arg2)

		_.bind - 

JASMINE: 
========
	describe is usually for class
	'it' is for method or use case

PROJECT DESCRIPTION:
====================
1. Contains a playlist view on the left side that contains all the selected album (with tracks) to be played, has play, stop, next, previous buttons
2. Contains music library on the right that contains all the albums with its corresponding tracks (songs) has a add button when clicked album will be added to the playlist

- Create Album Model (Album)
- Create View for each model -- contains add button, title, artist and tracks (Album)
- Create View for each model in library -- contains (LibraryAlbumView)
- Create View for Collection of albums (Music library) -- contains each of all the albums in the collection (LibraryView)
- Create View for Collection of selected albums (PlaylistView) -- contains header, play/stop, next, prev buttons and albums
- Create Collection for selected albums (Playlist)
- Create Player model -- contains 

Questions
----------
1. What will happen if the user adds an album that is already existing


COLLECTION:
==========
Collections: 
	each: 
	map: produces new array of values by mapping each value in the list through a transformation function (iterator)
	pluck: will pull out a single attribute in each model and return as array
	select, 
	reject, 
	pluck, 
	max, 
	min, 
	sortBy, 
	size

Arrays: first, rest, last, compact, flatten, without, union, intersection, uniq, indexOf, range

Functions: bind, bindAll, memoize, delay, defer, throttle, once , after wrap


COLLECTION AND VIEWS:
=====================
Render on data: it happens asynchronously, so you can't guarantee that the data will be thete at any specific time. React to the arrival of data.

May fire several times: The render method will be called at least twice, and maybe many more times. Clear out the existing HTML so content isn't duplicated

Collection - add, remove, reset

Albums.reset([ {title: '..' }])
	- Preload - Call 'reset' directly with an array of key/value objects. fires the reset when done

ROUTER:
=======
* Understand the role of the Router
* Write a route
* Write a route handler method
* Understand URLs and pushState
* Navigate programmatically

Parts of the router:
routes - keys and values mapping URLs to custom route handler methods
initialize - setup root views, but dont' render or append to the document
custome route handlers - add specific views to the document adn load extra data (such as a specific date specified in the URL)

{ pushState: true } // try to implement using push state

==============================================
II. Interactivity

1. Add button
	* Manipulate data not markup

2. 
	- Make a playlist collection
	- Reuse exisitng models and collections
	- Write a test for the new collection
	- Add custom methods to a collection

	Reusing Collection
	- Role: each collection may hold different data use the same model.	
	- Custom Queries: Server-backed collections may modify their URL to fetch different data, but use the same model to store it.

	TDD: Playlist 11:35

3. 
	- Design and implement the Player model
	- Use default model attributes
	- Use Javascript properties
	- Implement play and pause methods
	- Write convenience methods
	- Use at()

	Collection
		- Manages an array of models
		- can trigger custom events
		- can become complicated when trying to recreate the functionality of a model
		- Can become complicated when trying to recreate the functionality of a model

	Model:
		- Works with attributes
		- Automatically triggers data change events
		- Can use custom methods
		- Can use JS properties to reference other objects
	
	NextTrack and PreviousTrack:
		[TDD] mindset, always keep in mind that the data depends on what you declare/provided e.g. in TunesSpec.js data are passed in beforeEach function, you can manipulate data in other describes without affecting the data on the other. Always keep in mind of the data, state and values
		
		[TDD] Read the tests on "player" there are describes there that has a value and no value. Knowing that, we must provide data for the test functionality.

4. PlaylistAlbumView
	- Make a subclass for PlaylistAlbumView 

	* Coffeescript methods without arguments should use parentheses

5. PlaylistView
	- Implement Playlist view
	- Add controls
	- Optimize template setup
	- Use Backbone Model options

6. Add & Remove Albums
	- click -> select -> view -> add -> view

	change to the UI should happen in reaction in a data change event not directly from the user interaction event.

	35:00